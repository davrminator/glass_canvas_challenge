{
  "version": 3,
  "sources": ["../../mobx-react/src/utils/utils.ts", "../../mobx-react/src/observerClass.ts", "../../mobx-react/src/observer.tsx", "../../mobx-react/src/Provider.tsx", "../../mobx-react/src/inject.ts", "../../mobx-react/src/disposeOnUnmount.ts", "../../mobx-react/src/propTypes.ts", "../../mobx-react/src/index.ts"],
  "sourcesContent": ["export function shallowEqual(objA: any, objB: any): boolean {\n    //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (is(objA, objB)) {\n        return true\n    }\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false\n    }\n    const keysA = Object.keys(objA)\n    const keysB = Object.keys(objB)\n    if (keysA.length !== keysB.length) {\n        return false\n    }\n    for (let i = 0; i < keysA.length; i++) {\n        if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false\n        }\n    }\n    return true\n}\n\nfunction is(x: any, y: any): boolean {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y\n    } else {\n        return x !== x && y !== y\n    }\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList = {\n    $$typeof: 1,\n    render: 1,\n    compare: 1,\n    type: 1,\n    childContextTypes: 1,\n    contextType: 1,\n    contextTypes: 1,\n    defaultProps: 1,\n    getDefaultProps: 1,\n    getDerivedStateFromError: 1,\n    getDerivedStateFromProps: 1,\n    mixins: 1,\n    displayName: 1,\n    propTypes: 1\n}\n\nexport function copyStaticProperties(base: object, target: object): void {\n    const protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base))\n    Object.getOwnPropertyNames(base).forEach(key => {\n        if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n\n/**\n * Helper to set `prop` to `this` as non-enumerable (hidden prop)\n * @param target\n * @param prop\n * @param value\n */\nexport function setHiddenProp(target: object, prop: any, value: any): void {\n    if (!Object.hasOwnProperty.call(target, prop)) {\n        Object.defineProperty(target, prop, {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value\n        })\n    } else {\n        target[prop] = value\n    }\n}\n\n/**\n * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks\n * and the handler provided by mobx-react\n */\nconst mobxMixins = Symbol(\"patchMixins\")\nconst mobxPatchedDefinition = Symbol(\"patchedDefinition\")\n\nexport interface Mixins extends Record<string, any> {\n    locks: number\n    methods: Array<Function>\n}\n\nfunction getMixins(target: object, methodName: string): Mixins {\n    const mixins = (target[mobxMixins] = target[mobxMixins] || {})\n    const methodMixins = (mixins[methodName] = mixins[methodName] || {})\n    methodMixins.locks = methodMixins.locks || 0\n    methodMixins.methods = methodMixins.methods || []\n    return methodMixins\n}\n\nfunction wrapper(realMethod: Function, mixins: Mixins, ...args: Array<any>) {\n    // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls\n    mixins.locks++\n\n    try {\n        let retVal\n        if (realMethod !== undefined && realMethod !== null) {\n            retVal = realMethod.apply(this, args)\n        }\n\n        return retVal\n    } finally {\n        mixins.locks--\n        if (mixins.locks === 0) {\n            mixins.methods.forEach(mx => {\n                mx.apply(this, args)\n            })\n        }\n    }\n}\n\nfunction wrapFunction(realMethod: Function, mixins: Mixins): (...args: Array<any>) => any {\n    const fn = function (...args: Array<any>) {\n        wrapper.call(this, realMethod, mixins, ...args)\n    }\n    return fn\n}\n\nexport function patch(target: object, methodName: string, mixinMethod: Function): void {\n    const mixins = getMixins(target, methodName)\n\n    if (mixins.methods.indexOf(mixinMethod) < 0) {\n        mixins.methods.push(mixinMethod)\n    }\n\n    const oldDefinition = Object.getOwnPropertyDescriptor(target, methodName)\n    if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {\n        // already patched definition, do not repatch\n        return\n    }\n\n    const originalMethod = target[methodName]\n    const newDefinition = createDefinition(\n        target,\n        methodName,\n        oldDefinition ? oldDefinition.enumerable : undefined,\n        mixins,\n        originalMethod\n    )\n\n    Object.defineProperty(target, methodName, newDefinition)\n}\n\nfunction createDefinition(\n    target: object,\n    methodName: string,\n    enumerable: any,\n    mixins: Mixins,\n    originalMethod: Function\n): PropertyDescriptor {\n    let wrappedFunc = wrapFunction(originalMethod, mixins)\n\n    return {\n        // @ts-ignore\n        [mobxPatchedDefinition]: true,\n        get: function () {\n            return wrappedFunc\n        },\n        set: function (value) {\n            if (this === target) {\n                wrappedFunc = wrapFunction(value, mixins)\n            } else {\n                // when it is an instance of the prototype/a child prototype patch that particular case again separately\n                // since we need to store separate values depending on wether it is the actual instance, the prototype, etc\n                // e.g. the method for super might not be the same as the method for the prototype which might be not the same\n                // as the method for the instance\n                const newDefinition = createDefinition(this, methodName, enumerable, mixins, value)\n                Object.defineProperty(this, methodName, newDefinition)\n            }\n        },\n        configurable: true,\n        enumerable: enumerable\n    }\n}\n", "import { PureComponent, Component, ComponentClass, ClassAttributes } from \"react\"\nimport {\n    _allowStateChanges,\n    Reaction,\n    _allowStateReadsStart,\n    _allowStateReadsEnd,\n    _getGlobalState\n} from \"mobx\"\nimport {\n    isUsingStaticRendering,\n    _observerFinalizationRegistry as observerFinalizationRegistry\n} from \"mobx-react-lite\"\nimport { shallowEqual, patch } from \"./utils/utils\"\n\nconst administrationSymbol = Symbol(\"ObserverAdministration\")\nconst isMobXReactObserverSymbol = Symbol(\"isMobXReactObserver\")\n\nlet observablePropDescriptors: PropertyDescriptorMap\nif (__DEV__) {\n    observablePropDescriptors = {\n        props: createObservablePropDescriptor(\"props\"),\n        state: createObservablePropDescriptor(\"state\"),\n        context: createObservablePropDescriptor(\"context\")\n    }\n}\n\ntype ObserverAdministration = {\n    reaction: Reaction | null // also serves as disposed flag\n    forceUpdate: Function | null\n    mounted: boolean // we could use forceUpdate as mounted flag\n    name: string\n    // Used only on __DEV__\n    props: any\n    state: any\n    context: any\n}\n\nfunction getAdministration(component: Component): ObserverAdministration {\n    // We create administration lazily, because we can't patch constructor\n    // and the exact moment of initialization partially depends on React internals.\n    // At the time of writing this, the first thing invoked is one of the observable getter/setter (state/props/context).\n    return (component[administrationSymbol] ??= {\n        reaction: null,\n        mounted: false,\n        forceUpdate: null,\n        name: getDisplayName(component.constructor as ComponentClass),\n        state: undefined,\n        props: undefined,\n        context: undefined\n    })\n}\n\nexport function makeClassComponentObserver(\n    componentClass: ComponentClass<any, any>\n): ComponentClass<any, any> {\n    const { prototype } = componentClass\n\n    if (componentClass[isMobXReactObserverSymbol]) {\n        const displayName = getDisplayName(componentClass)\n        throw new Error(\n            `The provided component class (${displayName}) has already been declared as an observer component.`\n        )\n    } else {\n        componentClass[isMobXReactObserverSymbol] = true\n    }\n\n    if (prototype.componentWillReact) {\n        throw new Error(\"The componentWillReact life-cycle event is no longer supported\")\n    }\n    if (componentClass[\"__proto__\"] !== PureComponent) {\n        if (!prototype.shouldComponentUpdate) {\n            prototype.shouldComponentUpdate = observerSCU\n        } else if (prototype.shouldComponentUpdate !== observerSCU) {\n            // n.b. unequal check, instead of existence check, as @observer might be on superclass as well\n            throw new Error(\n                \"It is not allowed to use shouldComponentUpdate in observer based components.\"\n            )\n        }\n    }\n\n    if (__DEV__) {\n        Object.defineProperties(prototype, observablePropDescriptors)\n    }\n\n    const originalRender = prototype.render\n    if (typeof originalRender !== \"function\") {\n        const displayName = getDisplayName(componentClass)\n        throw new Error(\n            `[mobx-react] class component (${displayName}) is missing \\`render\\` method.` +\n                `\\n\\`observer\\` requires \\`render\\` being a function defined on prototype.` +\n                `\\n\\`render = () => {}\\` or \\`render = function() {}\\` is not supported.`\n        )\n    }\n\n    prototype.render = function () {\n        Object.defineProperty(this, \"render\", {\n            // There is no safe way to replace render, therefore it's forbidden.\n            configurable: false,\n            writable: false,\n            value: isUsingStaticRendering()\n                ? originalRender\n                : createReactiveRender.call(this, originalRender)\n        })\n        return this.render()\n    }\n\n    const originalComponentDidMount = prototype.componentDidMount\n    prototype.componentDidMount = function () {\n        if (__DEV__ && this.componentDidMount !== Object.getPrototypeOf(this).componentDidMount) {\n            const displayName = getDisplayName(componentClass)\n            throw new Error(\n                `[mobx-react] \\`observer(${displayName}).componentDidMount\\` must be defined on prototype.` +\n                    `\\n\\`componentDidMount = () => {}\\` or \\`componentDidMount = function() {}\\` is not supported.`\n            )\n        }\n\n        // `componentDidMount` may not be called at all. React can abandon the instance after `render`.\n        // That's why we use finalization registry to dispose reaction created during render.\n        // Happens with `<Suspend>` see #3492\n        //\n        // `componentDidMount` can be called immediately after `componentWillUnmount` without calling `render` in between.\n        // Happens with `<StrictMode>`see #3395.\n        //\n        // If `componentDidMount` is called, it's guaranteed to run synchronously with render (similary to `useLayoutEffect`).\n        // Therefore we don't have to worry about external (observable) state being updated before mount (no state version checking).\n        //\n        // Things may change: \"In the future, React will provide a feature that lets components preserve state between unmounts\"\n\n        const admin = getAdministration(this)\n\n        admin.mounted = true\n\n        // Component instance committed, prevent reaction disposal.\n        observerFinalizationRegistry.unregister(admin)\n\n        // We don't set forceUpdate before mount because it requires a reference to `this`,\n        // therefore `this` could NOT be garbage collected before mount,\n        // preventing reaction disposal by FinalizationRegistry and leading to memory leak.\n        // As an alternative we could have `admin.instanceRef = new WeakRef(this)`, but lets avoid it if possible.\n        admin.forceUpdate = () => this.forceUpdate()\n\n        if (!admin.reaction) {\n            // 1. Instance was unmounted (reaction disposed) and immediately remounted without running render #3395.\n            // 2. Reaction was disposed by finalization registry before mount. Shouldn't ever happen for class components:\n            // `componentDidMount` runs synchronously after render, but our registry are deferred (can't run in between).\n            // In any case we lost subscriptions to observables, so we have to create new reaction and re-render to resubscribe.\n            // The reaction will be created lazily by following render.\n            admin.forceUpdate()\n        }\n        return originalComponentDidMount?.apply(this, arguments)\n    }\n\n    // TODO@major Overly complicated \"patch\" is only needed to support the deprecated @disposeOnUnmount\n    patch(prototype, \"componentWillUnmount\", function () {\n        if (isUsingStaticRendering()) {\n            return\n        }\n        const admin = getAdministration(this)\n        admin.reaction?.dispose()\n        admin.reaction = null\n        admin.forceUpdate = null\n        admin.mounted = false\n    })\n\n    return componentClass\n}\n\n// Generates a friendly name for debugging\nfunction getDisplayName(componentClass: ComponentClass) {\n    return componentClass.displayName || componentClass.name || \"<component>\"\n}\n\nfunction createReactiveRender(originalRender: any) {\n    const boundOriginalRender = originalRender.bind(this)\n\n    const admin = getAdministration(this)\n\n    function reactiveRender() {\n        if (!admin.reaction) {\n            // Create reaction lazily to support re-mounting #3395\n            admin.reaction = createReaction(admin)\n            if (!admin.mounted) {\n                // React can abandon this instance and never call `componentDidMount`/`componentWillUnmount`,\n                // we have to make sure reaction will be disposed.\n                observerFinalizationRegistry.register(this, admin, this)\n            }\n        }\n\n        let error: unknown = undefined\n        let renderResult = undefined\n        admin.reaction.track(() => {\n            try {\n                // TODO@major\n                // Optimization: replace with _allowStateChangesStart/End (not available in mobx@6.0.0)\n                renderResult = _allowStateChanges(false, boundOriginalRender)\n            } catch (e) {\n                error = e\n            }\n        })\n        if (error) {\n            throw error\n        }\n        return renderResult\n    }\n\n    return reactiveRender\n}\n\nfunction createReaction(admin: ObserverAdministration) {\n    return new Reaction(`${admin.name}.render()`, () => {\n        if (!admin.mounted) {\n            // This is neccessary to avoid react warning about calling forceUpdate on component that isn't mounted yet.\n            // This happens when component is abandoned after render - our reaction is already created and reacts to changes.\n            // Due to the synchronous nature of `componenDidMount`, we don't have to worry that component could eventually mount and require update.\n            return\n        }\n\n        try {\n            admin.forceUpdate?.()\n        } catch (error) {\n            admin.reaction?.dispose()\n            admin.reaction = null\n        }\n    })\n}\n\nfunction observerSCU(nextProps: ClassAttributes<any>, nextState: any): boolean {\n    if (isUsingStaticRendering()) {\n        console.warn(\n            \"[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.\"\n        )\n    }\n    // update on any state changes (as is the default)\n    if (this.state !== nextState) {\n        return true\n    }\n    // update if props are shallowly not equal, inspired by PureRenderMixin\n    // we could return just 'false' here, and avoid the `skipRender` checks etc\n    // however, it is nicer if lifecycle events are triggered like usually,\n    // so we return true here if props are shallowly modified.\n    return !shallowEqual(this.props, nextProps)\n}\n\nfunction createObservablePropDescriptor(key: \"props\" | \"state\" | \"context\") {\n    return {\n        configurable: true,\n        enumerable: true,\n        get() {\n            const admin = getAdministration(this)\n            const derivation = _getGlobalState().trackingDerivation\n            if (derivation && derivation !== admin.reaction) {\n                throw new Error(\n                    `[mobx-react] Cannot read \"${admin.name}.${key}\" in a reactive context, as it isn't observable.\n                    Please use component lifecycle method to copy the value into a local observable first.\n                    See https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#note-on-using-props-and-state-in-derivations`\n                )\n            }\n            return admin[key]\n        },\n        set(value) {\n            getAdministration(this)[key] = value\n        }\n    }\n}\n", "import * as React from \"react\"\nimport { observer as observerLite } from \"mobx-react-lite\"\n\nimport { makeClassComponentObserver } from \"./observerClass\"\nimport { IReactComponent } from \"./types/IReactComponent\"\n\n/**\n * Observer function / decorator\n */\nexport function observer<T extends IReactComponent>(component: T): T {\n    if (component[\"isMobxInjector\"] === true) {\n        console.warn(\n            \"Mobx observer: You are trying to use `observer` on a component that already has `inject`. Please apply `observer` before applying `inject`\"\n        )\n    }\n\n    if (\n        Object.prototype.isPrototypeOf.call(React.Component, component) ||\n        Object.prototype.isPrototypeOf.call(React.PureComponent, component)\n    ) {\n        // Class component\n        return makeClassComponentObserver(component as React.ComponentClass<any, any>) as T\n    } else {\n        // Function component\n        return observerLite(component as React.FunctionComponent<any>) as T\n    }\n}\n", "import React from \"react\"\nimport { shallowEqual } from \"./utils/utils\"\nimport { IValueMap } from \"./types/IValueMap\"\n\nexport const MobXProviderContext = React.createContext<IValueMap>({})\n\nexport interface ProviderProps extends IValueMap {\n    children: React.ReactNode\n}\n\nexport function Provider(props: ProviderProps) {\n    const { children, ...stores } = props\n    const parentValue = React.useContext(MobXProviderContext)\n    const mutableProviderRef = React.useRef({ ...parentValue, ...stores })\n    const value = mutableProviderRef.current\n\n    if (__DEV__) {\n        const newValue = { ...value, ...stores } // spread in previous state for the context based stores\n        if (!shallowEqual(value, newValue)) {\n            throw new Error(\n                \"MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.\"\n            )\n        }\n    }\n\n    return <MobXProviderContext.Provider value={value}>{children}</MobXProviderContext.Provider>\n}\n\nProvider.displayName = \"MobXProvider\"\n", "import React from \"react\"\nimport { observer } from \"./observer\"\nimport { copyStaticProperties } from \"./utils/utils\"\nimport { MobXProviderContext } from \"./Provider\"\nimport { IReactComponent } from \"./types/IReactComponent\"\nimport { IValueMap } from \"./types/IValueMap\"\nimport { IWrappedComponent } from \"./types/IWrappedComponent\"\nimport { IStoresToProps } from \"./types/IStoresToProps\"\n\n/**\n * Store Injection\n */\nfunction createStoreInjector(\n    grabStoresFn: IStoresToProps,\n    component: IReactComponent<any>,\n    injectNames: string,\n    makeReactive: boolean\n): IReactComponent<any> {\n    // Support forward refs\n    let Injector: IReactComponent<any> = React.forwardRef((props, ref) => {\n        const newProps = { ...props }\n        const context = React.useContext(MobXProviderContext)\n        Object.assign(newProps, grabStoresFn(context || {}, newProps) || {})\n\n        if (ref) {\n            newProps.ref = ref\n        }\n\n        return React.createElement(component, newProps)\n    })\n\n    if (makeReactive) Injector = observer(Injector)\n    Injector[\"isMobxInjector\"] = true // assigned late to suppress observer warning\n\n    // Static fields from component should be visible on the generated Injector\n    copyStaticProperties(component, Injector)\n    Injector[\"wrappedComponent\"] = component\n    Injector.displayName = getInjectName(component, injectNames)\n    return Injector\n}\n\nfunction getInjectName(component: IReactComponent<any>, injectNames: string): string {\n    let displayName\n    const componentName =\n        component.displayName ||\n        component.name ||\n        (component.constructor && component.constructor.name) ||\n        \"Component\"\n    if (injectNames) displayName = \"inject-with-\" + injectNames + \"(\" + componentName + \")\"\n    else displayName = \"inject(\" + componentName + \")\"\n    return displayName\n}\n\nfunction grabStoresByName(\n    storeNames: Array<string>\n): (\n    baseStores: IValueMap,\n    nextProps: React.ClassAttributes<any>\n) => React.PropsWithRef<any> | undefined {\n    return function (baseStores, nextProps) {\n        storeNames.forEach(function (storeName) {\n            if (\n                storeName in nextProps // prefer props over stores\n            )\n                return\n            if (!(storeName in baseStores))\n                throw new Error(\n                    \"MobX injector: Store '\" +\n                        storeName +\n                        \"' is not available! Make sure it is provided by some Provider\"\n                )\n            nextProps[storeName] = baseStores[storeName]\n        })\n        return nextProps\n    }\n}\n\nexport function inject(\n    ...stores: Array<string>\n): <T extends IReactComponent<any>>(\n    target: T\n) => T & (T extends IReactComponent<infer P> ? IWrappedComponent<P> : never)\nexport function inject<S extends IValueMap = {}, P extends IValueMap = {}, I extends IValueMap = {}, C extends IValueMap = {}>(\n    fn: IStoresToProps<S, P, I, C>\n): <T extends IReactComponent>(target: T) => T & IWrappedComponent<P>\n\n/**\n * higher order component that injects stores to a child.\n * takes either a varargs list of strings, which are stores read from the context,\n * or a function that manually maps the available stores from the context to props:\n * storesToProps(mobxStores, props, context) => newProps\n */\nexport function inject(/* fn(stores, nextProps) or ...storeNames */ ...storeNames: Array<any>) {\n    if (typeof arguments[0] === \"function\") {\n        let grabStoresFn = arguments[0]\n        return (componentClass: React.ComponentClass<any, any>) =>\n            createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true)\n    } else {\n        return (componentClass: React.ComponentClass<any, any>) =>\n            createStoreInjector(\n                grabStoresByName(storeNames),\n                componentClass,\n                storeNames.join(\"-\"),\n                false\n            )\n    }\n}\n", "import React from \"react\"\nimport { patch } from \"./utils/utils\"\n\nconst reactMajorVersion = Number.parseInt(React.version.split(\".\")[0])\nlet warnedAboutDisposeOnUnmountDeprecated = false\n\ntype Disposer = () => void\n\nconst protoStoreKey = Symbol(\"disposeOnUnmountProto\")\nconst instStoreKey = Symbol(\"disposeOnUnmountInst\")\n\nfunction runDisposersOnWillUnmount() {\n    ;[...(this[protoStoreKey] || []), ...(this[instStoreKey] || [])].forEach(propKeyOrFunction => {\n        const prop =\n            typeof propKeyOrFunction === \"string\" ? this[propKeyOrFunction] : propKeyOrFunction\n        if (prop !== undefined && prop !== null) {\n            if (Array.isArray(prop)) prop.map(f => f())\n            else prop()\n        }\n    })\n}\n\n/**\n * @deprecated `disposeOnUnmount` is not compatible with React 18 and higher.\n */\nexport function disposeOnUnmount(target: React.Component<any, any>, propertyKey: PropertyKey): void\n\n/**\n * @deprecated `disposeOnUnmount` is not compatible with React 18 and higher.\n */\nexport function disposeOnUnmount<TF extends Disposer | Array<Disposer>>(\n    target: React.Component<any, any>,\n    fn: TF\n): TF\n\n/**\n * @deprecated `disposeOnUnmount` is not compatible with React 18 and higher.\n */\nexport function disposeOnUnmount(\n    target: React.Component<any, any>,\n    propertyKeyOrFunction: PropertyKey | Disposer | Array<Disposer>\n): PropertyKey | Disposer | Array<Disposer> | void {\n    if (Array.isArray(propertyKeyOrFunction)) {\n        return propertyKeyOrFunction.map(fn => disposeOnUnmount(target, fn))\n    }\n\n    if (!warnedAboutDisposeOnUnmountDeprecated) {\n        if (reactMajorVersion >= 18) {\n            console.error(\n                \"[mobx-react] disposeOnUnmount is not compatible with React 18 and higher. Don't use it.\"\n            )\n        } else {\n            console.warn(\n                \"[mobx-react] disposeOnUnmount is deprecated. It won't work correctly with React 18 and higher.\"\n            )\n        }\n        warnedAboutDisposeOnUnmountDeprecated = true\n    }\n\n    const c = Object.getPrototypeOf(target).constructor\n    const c2 = Object.getPrototypeOf(target.constructor)\n    // Special case for react-hot-loader\n    const c3 = Object.getPrototypeOf(Object.getPrototypeOf(target))\n    if (\n        !(\n            c === React.Component ||\n            c === React.PureComponent ||\n            c2 === React.Component ||\n            c2 === React.PureComponent ||\n            c3 === React.Component ||\n            c3 === React.PureComponent\n        )\n    ) {\n        throw new Error(\n            \"[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.\"\n        )\n    }\n\n    if (\n        typeof propertyKeyOrFunction !== \"string\" &&\n        typeof propertyKeyOrFunction !== \"function\" &&\n        !Array.isArray(propertyKeyOrFunction)\n    ) {\n        throw new Error(\n            \"[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.\"\n        )\n    }\n\n    // decorator's target is the prototype, so it doesn't have any instance properties like props\n    const isDecorator = typeof propertyKeyOrFunction === \"string\"\n\n    // add property key / function we want run (disposed) to the store\n    const componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey]\n    const store = isDecorator\n        ? // decorators are added to the prototype store\n          target[protoStoreKey] || (target[protoStoreKey] = [])\n        : // functions are added to the instance store\n          target[instStoreKey] || (target[instStoreKey] = [])\n\n    store.push(propertyKeyOrFunction)\n\n    // tweak the component class componentWillUnmount if not done already\n    if (!componentWasAlreadyModified) {\n        patch(target, \"componentWillUnmount\", runDisposersOnWillUnmount)\n    }\n\n    // return the disposer as is if invoked as a non decorator\n    if (typeof propertyKeyOrFunction !== \"string\") {\n        return propertyKeyOrFunction\n    }\n}\n", "import { isObservableArray, isObservableObject, isObservableMap, untracked } from \"mobx\"\n\n// Copied from React.PropTypes\nfunction createChainableTypeChecker(validator: React.Validator<any>): React.Requireable<any> {\n    function checkType(\n        isRequired: boolean,\n        props: any,\n        propName: string,\n        componentName: string,\n        location: string,\n        propFullName: string,\n        ...rest: any[]\n    ) {\n        return untracked(() => {\n            componentName = componentName || \"<<anonymous>>\"\n            propFullName = propFullName || propName\n            if (props[propName] == null) {\n                if (isRequired) {\n                    const actual = props[propName] === null ? \"null\" : \"undefined\"\n                    return new Error(\n                        \"The \" +\n                            location +\n                            \" `\" +\n                            propFullName +\n                            \"` is marked as required \" +\n                            \"in `\" +\n                            componentName +\n                            \"`, but its value is `\" +\n                            actual +\n                            \"`.\"\n                    )\n                }\n                return null\n            } else {\n                // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise\n                return validator(props, propName, componentName, location, propFullName, ...rest)\n            }\n        })\n    }\n\n    const chainedCheckType: any = checkType.bind(null, false)\n    // Add isRequired to satisfy Requirable\n    chainedCheckType.isRequired = checkType.bind(null, true)\n    return chainedCheckType\n}\n\n// Copied from React.PropTypes\nfunction isSymbol(propType: any, propValue: any): boolean {\n    // Native Symbol.\n    if (propType === \"symbol\") {\n        return true\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue[\"@@toStringTag\"] === \"Symbol\") {\n        return true\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === \"function\" && propValue instanceof Symbol) {\n        return true\n    }\n\n    return false\n}\n\n// Copied from React.PropTypes\nfunction getPropType(propValue: any): string {\n    const propType = typeof propValue\n    if (Array.isArray(propValue)) {\n        return \"array\"\n    }\n    if (propValue instanceof RegExp) {\n        // Old webkits (at least until Android 4.0) return 'function' rather than\n        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n        // passes PropTypes.object.\n        return \"object\"\n    }\n    if (isSymbol(propType, propValue)) {\n        return \"symbol\"\n    }\n    return propType\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// Copied from React.PropTypes\nfunction getPreciseType(propValue: any): string {\n    const propType = getPropType(propValue)\n    if (propType === \"object\") {\n        if (propValue instanceof Date) {\n            return \"date\"\n        } else if (propValue instanceof RegExp) {\n            return \"regexp\"\n        }\n    }\n    return propType\n}\n\nfunction createObservableTypeCheckerCreator(\n    allowNativeType: any,\n    mobxType: any\n): React.Requireable<any> {\n    return createChainableTypeChecker((props, propName, componentName, location, propFullName) => {\n        return untracked(() => {\n            if (allowNativeType) {\n                if (getPropType(props[propName]) === mobxType.toLowerCase()) return null\n            }\n            let mobxChecker\n            switch (mobxType) {\n                case \"Array\":\n                    mobxChecker = isObservableArray\n                    break\n                case \"Object\":\n                    mobxChecker = isObservableObject\n                    break\n                case \"Map\":\n                    mobxChecker = isObservableMap\n                    break\n                default:\n                    throw new Error(`Unexpected mobxType: ${mobxType}`)\n            }\n            const propValue = props[propName]\n            if (!mobxChecker(propValue)) {\n                const preciseType = getPreciseType(propValue)\n                const nativeTypeExpectationMessage = allowNativeType\n                    ? \" or javascript `\" + mobxType.toLowerCase() + \"`\"\n                    : \"\"\n                return new Error(\n                    \"Invalid prop `\" +\n                        propFullName +\n                        \"` of type `\" +\n                        preciseType +\n                        \"` supplied to\" +\n                        \" `\" +\n                        componentName +\n                        \"`, expected `mobx.Observable\" +\n                        mobxType +\n                        \"`\" +\n                        nativeTypeExpectationMessage +\n                        \".\"\n                )\n            }\n            return null\n        })\n    })\n}\n\nfunction createObservableArrayOfTypeChecker(\n    allowNativeType: boolean,\n    typeChecker: React.Validator<any>\n) {\n    return createChainableTypeChecker(\n        (props, propName, componentName, location, propFullName, ...rest) => {\n            return untracked(() => {\n                if (typeof typeChecker !== \"function\") {\n                    return new Error(\n                        \"Property `\" +\n                            propFullName +\n                            \"` of component `\" +\n                            componentName +\n                            \"` has \" +\n                            \"invalid PropType notation.\"\n                    )\n                } else {\n                    let error = createObservableTypeCheckerCreator(allowNativeType, \"Array\")(\n                        props,\n                        propName,\n                        componentName,\n                        location,\n                        propFullName\n                    )\n\n                    if (error instanceof Error) return error\n                    const propValue = props[propName]\n                    for (let i = 0; i < propValue.length; i++) {\n                        error = (typeChecker as React.Validator<any>)(\n                            propValue,\n                            i as any,\n                            componentName,\n                            location,\n                            propFullName + \"[\" + i + \"]\",\n                            ...rest\n                        )\n                        if (error instanceof Error) return error\n                    }\n\n                    return null\n                }\n            })\n        }\n    )\n}\n\nconst observableArray = createObservableTypeCheckerCreator(false, \"Array\")\nconst observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false)\nconst observableMap = createObservableTypeCheckerCreator(false, \"Map\")\nconst observableObject = createObservableTypeCheckerCreator(false, \"Object\")\nconst arrayOrObservableArray = createObservableTypeCheckerCreator(true, \"Array\")\nconst arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true)\nconst objectOrObservableObject = createObservableTypeCheckerCreator(true, \"Object\")\n\nexport const PropTypes = {\n    observableArray,\n    observableArrayOf,\n    observableMap,\n    observableObject,\n    arrayOrObservableArray,\n    arrayOrObservableArrayOf,\n    objectOrObservableObject\n}\n", "import { observable } from \"mobx\"\nimport { Component } from \"react\"\n\nif (!Component) {\n    throw new Error(\"mobx-react requires React to be available\")\n}\n\nif (!observable) {\n    throw new Error(\"mobx-react requires mobx to be available\")\n}\n\nexport {\n    Observer,\n    useObserver,\n    useAsObservableSource,\n    useLocalStore,\n    isUsingStaticRendering,\n    useStaticRendering,\n    enableStaticRendering,\n    observerBatching,\n    useLocalObservable\n} from \"mobx-react-lite\"\n\nexport { observer } from \"./observer\"\n\nexport { MobXProviderContext, Provider, ProviderProps } from \"./Provider\"\nexport { inject } from \"./inject\"\nexport { disposeOnUnmount } from \"./disposeOnUnmount\"\nexport { PropTypes } from \"./propTypes\"\nexport { IWrappedComponent } from \"./types/IWrappedComponent\"\n"],
  "mappings": "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",
  "names": ["shallowEqual", "objA", "objB", "is", "keysA", "Object", "keys", "keysB", "length", "i", "hasOwnProperty", "call", "x", "y", "hoistBlackList", "$$typeof", "render", "compare", "type", "childContextTypes", "contextType", "contextTypes", "defaultProps", "getDefaultProps", "getDerivedStateFromError", "getDerivedStateFromProps", "mixins", "displayName", "propTypes", "copyStaticProperties", "base", "target", "protoProps", "getOwnPropertyNames", "getPrototypeOf", "forEach", "key", "indexOf", "defineProperty", "getOwnPropertyDescriptor", "mobxMixins", "Symbol", "mobxPatchedDefinition", "getMixins", "methodName", "methodMixins", "locks", "methods", "wrapper", "realMethod", "args", "retVal", "undefined", "apply", "mx", "wrapFunction", "fn", "patch", "mixinMethod", "push", "oldDefinition", "originalMethod", "newDefinition", "createDefinition", "enumerable", "wrappedFunc", "get", "set", "value", "configurable", "administrationSymbol", "isMobXReactObserverSymbol", "observablePropDescriptors", "props", "createObservablePropDescriptor", "state", "context", "getAdministration", "component", "reaction", "mounted", "forceUpdate", "name", "getDisplayName", "constructor", "makeClassComponentObserver", "componentClass", "prototype", "Error", "componentWillReact", "PureComponent", "shouldComponentUpdate", "observerSCU", "defineProperties", "originalRender", "writable", "isUsingStaticRendering", "createReactiveRender", "originalComponentDidMount", "componentDidMount", "admin", "observerFinalizationRegistry", "unregister", "arguments", "dispose", "boundOriginalRender", "bind", "reactiveRender", "createReaction", "register", "error", "renderResult", "track", "_allowStateChanges", "e", "Reaction", "nextProps", "nextState", "console", "warn", "derivation", "_getGlobalState", "trackingDerivation", "observer", "isPrototypeOf", "React", "observerLite", "MobXProviderContext", "createContext", "Provider", "children", "stores", "parentValue", "useContext", "mutableProviderRef", "useRef", "current", "newValue", "createStoreInjector", "grabStoresFn", "injectNames", "makeReactive", "Injector", "forwardRef", "ref", "newProps", "assign", "createElement", "getInjectName", "componentName", "grabStoresByName", "storeNames", "baseStores", "storeName", "inject", "join", "reactMajorVersion", "Number", "parseInt", "version", "split", "warnedAboutDisposeOnUnmountDeprecated", "protoStoreKey", "instStoreKey", "runDisposersOnWillUnmount", "propKeyOrFunction", "prop", "Array", "isArray", "map", "f", "disposeOnUnmount", "propertyKeyOrFunction", "c", "c2", "c3", "Component", "isDecorator", "componentWasAlreadyModified", "store", "createChainableTypeChecker", "validator", "checkType", "isRequired", "propName", "location", "propFullName", "rest", "untracked", "actual", "chainedCheckType", "isSymbol", "propType", "propValue", "getPropType", "RegExp", "getPreciseType", "Date", "createObservableTypeCheckerCreator", "allowNativeType", "mobxType", "toLowerCase", "mobxChecker", "isObservableArray", "isObservableObject", "isObservableMap", "preciseType", "nativeTypeExpectationMessage", "createObservableArrayOfTypeChecker", "typeChecker", "observableArray", "observableArrayOf", "observableMap", "observableObject", "arrayOrObservableArray", "arrayOrObservableArrayOf", "objectOrObservableObject", "PropTypes", "observable"]
}
